---

- name: Bootstrap | Checking python intepreter
  ansible.builtin.set_fact:
    ansible_python_interpreter: "{{ check_python_interpreter[ansible_distribution|lower][ansible_distribution_major_version] | default(check_python_interpreter.other) }}"
  when: >
    (ansible_python_interpreter is undefined and interpreter_python is undefined) or
    (ansible_python_interpreter is defined and ansible_python_interpreter != check_python_interpreter[ansible_distribution|lower][ansible_distribution_major_version] | default(check_python_interpreter.other)) or
    (interpreter_python is defined and interpreter_python != check_python_interpreter[ansible_distribution|lower][ansible_distribution_major_version] | default(check_python_interpreter.other))

- name: Bootstrap | Getting local timezone
  ansible.builtin.shell: "timedatectl | grep 'Time zone' | cut -d':' -f2 | cut -d' ' -f2"
  register: controller_tz
  delegate_to: localhost
  when: timezone is undefined
  changed_when: false
  check_mode: false
  become: false

- name: Bootstrap | Setting timezone on host
  community.general.timezone:
    name: "{{ timezone | default(controller_tz.stdout) }}"

- name: Bootstrap | Setting hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Bootstrap | Processing debian config
  ansible.builtin.import_tasks: based_debian.yml
  when: "ansible_distribution|lower in ['debian', 'ubuntu']"

- name: Bootstrap | Processing users
  ansible.builtin.include_role:
    name: ansibleguy.linux_users
  when: >
    configure_users and
    ((users is defined and users | length > 0) or
    (user_groups is defined and user_groups | length > 0))

- name: Bootstrap | Processing network
  ansible.builtin.include_role:
    name: ansibleguy.linux_networking
  when: configure_network
